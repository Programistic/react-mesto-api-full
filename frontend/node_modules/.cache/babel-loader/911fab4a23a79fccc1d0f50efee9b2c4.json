{"ast":null,"code":"var _jsxFileName = \"/home/maksim/dev/mesto-react-auth/src/components/App.js\";\nimport { Component } from 'react';\nimport { Route, Switch, Redirect, withRouter } from 'react-router-dom';\nimport { CurrentUserContext } from '../contexts/CurrentUserContext';\nimport api from '../utils/Api';\nimport Header from './Header';\nimport Main from './Main';\nimport Footer from './Footer';\nimport EditProfilePopup from './EditProfilePopup';\nimport EditAvatarPopup from './EditAvatarPopup';\nimport AddPlacePopup from './AddPlacePopup';\nimport ImagePopup from './ImagePopup';\nimport ConfirmDeletePopup from './ConfirmDeletePopup';\nimport ProtectedRoute from './ProtectedRoute';\nimport Register from './Register';\nimport Login from './Login';\nimport InfoTooltip from './InfoTooltip';\nimport * as Auth from './Auth';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.handleLogin = () => {\n      this.setState({\n        loggedIn: true\n      });\n    };\n\n    this.tokenCheck = () => {\n      if (localStorage.getItem('jwt')) {\n        const jwt = localStorage.getItem('jwt');\n      }\n\n      if (jwt) {\n        Auth.getContent(jwt).then(res => {\n          if (res) {\n            const userData = {\n              email: res.email\n            };\n            this.setState({\n              loggedIn: true\n            }, () => {\n              this.props.history.push(\"/main\");\n            });\n          }\n        });\n      }\n    };\n\n    this.handleEditProfileClick = () => {\n      this.setState({\n        isEditProfilePopupOpen: true\n      });\n    };\n\n    this.handleAddPlaceClick = () => {\n      this.setState({\n        isAddPlacePopupOpen: true\n      });\n    };\n\n    this.handleEditAvatarClick = () => {\n      this.setState({\n        isEditAvatarPopupOpen: true\n      });\n    };\n\n    this.handleConfirmDeleteCardClick = () => {\n      this.setState({\n        isConfirmPopupOpen: true\n      });\n    };\n\n    this.handleEscClick = event => {\n      if (event.key === 'Escape') {\n        this.closeAllPopups();\n      }\n    };\n\n    this.handleOutsideClick = event => {\n      if (event.target.classList.contains('popup')) {\n        this.closeAllPopups();\n      }\n    };\n\n    this.handleUpdateUser = (userName, userDescription) => {\n      api.setUserInfo(userName, userDescription).then(userData => {\n        this.setState({\n          currentUser: userData\n        });\n        this.closeAllPopups();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.handleUpdateAvatar = userAvatar => {\n      api.setAvatar(userAvatar).then(userData => {\n        this.setState({\n          currentUser: userData\n        });\n        this.closeAllPopups();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.handleCardLike = card => {\n      const isLiked = card.likes.some(like => like._id === this.state.currentUser._id);\n      api.changeLikeCardStatus(card._id, isLiked).then(getCard => {\n        this.setState({\n          cards: this.state.cards.map(oldCard => oldCard._id === getCard._id ? getCard : oldCard)\n        });\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.handleCardDelete = () => {\n      api.deleteCard(this.state.deleteCard._id).then(() => {\n        this.setState({\n          cards: this.state.cards.filter(currentCard => currentCard._id !== this.state.deleteCard._id),\n          isConfirmPopupOpen: false\n        });\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.handleCardClick = card => {\n      this.setState({\n        selectedCard: card\n      });\n    };\n\n    this.handleAddPlace = (placeName, placeImage) => {\n      api.setCard(placeName, placeImage).then(newCard => {\n        this.setState({\n          cards: [newCard, ...this.state.cards]\n        });\n        this.closeAllPopups();\n      }).catch(err => {\n        console.log(err);\n      });\n    };\n\n    this.closeAllPopups = () => {\n      this.setState({\n        isEditProfilePopupOpen: false,\n        isAddPlacePopupOpen: false,\n        isEditAvatarPopupOpen: false,\n        isConfirmPopupOpen: false,\n        isInfoTooltipOpen: false,\n        selectedCard: {}\n      });\n    };\n\n    this.openConfirmDeletePopup = card => {\n      this.setState({\n        deleteCard: card,\n        isConfirmPopupOpen: true\n      });\n    };\n\n    this.openTooltipSuccess = () => {\n      this.setState({\n        isSuccess: true,\n        isInfoTooltipOpen: true,\n        infoTooltipButtonName: 'success',\n        infoTooltipMessage: 'Вы успешно зарегистрировались!'\n      });\n    };\n\n    this.openTooltipFail = () => {\n      this.setState({\n        isSuccess: false,\n        isInfoTooltipOpen: true,\n        infoTooltipButtonName: 'fail',\n        infoTooltipMessage: 'Что-то пошло не так! Попробуйте ещё раз.'\n      });\n    };\n\n    this.handleConfirmRegister = () => {\n      this.closeAllPopups();\n\n      if (this.state.isSuccess) {\n        this.props.history.push('/signin');\n      }\n    };\n\n    this.state = {\n      isEditProfilePopupOpen: false,\n      isAddPlacePopupOpen: false,\n      isEditAvatarPopupOpen: false,\n      isConfirmPopupOpen: false,\n      isInfoTooltipOpen: false,\n      infoTooltipButtonName: '',\n      infoTooltipMessage: '',\n      isSuccess: false,\n      selectedCard: {},\n      deleteCard: {},\n      cards: [],\n      currentUser: {},\n      loggedIn: false\n    };\n    this.handleLogin = this.handleLogin.bind(this);\n    this.tokenCheck = this.tokenCheck.bind(this);\n  }\n\n  componentDidMount() {\n    api.getUserInfo().then(userData => {\n      this.setState({\n        currentUser: userData\n      });\n    }).catch(err => {\n      console.log(err);\n    });\n    api.getCards().then(getCardsArray => {\n      this.setState({\n        cards: getCardsArray\n      });\n    }).catch(err => {\n      console.log(err);\n    });\n    this.tokenCheck();\n    document.addEventListener(\"keydown\", this.handleEscClick);\n    document.addEventListener(\"click\", this.handleOutsideClick);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.handleEscClick);\n    document.addEventListener(\"click\", this.handleOutsideClick);\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"page\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: /*#__PURE__*/_jsxDEV(CurrentUserContext.Provider, {\n          value: this.state.currentUser,\n          children: [/*#__PURE__*/_jsxDEV(Header, {\n            loggedIn: this.state.loggedIn,\n            email: this.userData.email,\n            buttonText: \"\\u0412\\u044B\\u0439\\u0442\\u0438\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 237,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(Switch, {\n            children: [/*#__PURE__*/_jsxDEV(ProtectedRoute, {\n              path: \"/main\",\n              loggedIn: this.state.loggedIn,\n              cards: this.state.cards,\n              onEditProfile: this.handleEditProfileClick,\n              onAddPlace: this.handleAddPlaceClick,\n              onEditAvatar: this.handleEditAvatarClick,\n              onCardLike: this.handleCardLike,\n              onCardDelete: this.openConfirmDeletePopup,\n              onCardClick: this.handleCardClick,\n              component: Main\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 241,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Route, {\n              path: \"/signin\",\n              children: /*#__PURE__*/_jsxDEV(Login, {\n                handleLogin: this.handleLogin\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 255,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 254,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Route, {\n              path: \"/signup\",\n              children: /*#__PURE__*/_jsxDEV(Register, {\n                tooltipSuccess: this.openTooltipSuccess,\n                tooltipFail: this.openTooltipFail\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 259,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 258,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(Route, {\n              children: this.state.loggedIn ? /*#__PURE__*/_jsxDEV(Redirect, {\n                to: \"/signin\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 263,\n                columnNumber: 40\n              }, this) : /*#__PURE__*/_jsxDEV(Redirect, {\n                to: \"/signup\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 263,\n                columnNumber: 68\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 262,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 13\n          }, this), this.state.loggedIn && /*#__PURE__*/_jsxDEV(Footer, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 268,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(EditProfilePopup, {\n            isOpen: this.state.isEditProfilePopupOpen,\n            onUpdateUser: this.handleUpdateUser,\n            onClose: this.closeAllPopups\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 271,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(EditAvatarPopup, {\n            isOpen: this.state.isEditAvatarPopupOpen,\n            onUpdateAvatar: this.handleUpdateAvatar,\n            onClose: this.closeAllPopups\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 277,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(AddPlacePopup, {\n            isOpen: this.state.isAddPlacePopupOpen,\n            onAddPlace: this.handleAddPlace,\n            onClose: this.closeAllPopups\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 283,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ConfirmDeletePopup, {\n            isOpen: this.state.isConfirmPopupOpen,\n            onConfirmDeleteCard: this.handleCardDelete,\n            onClose: this.closeAllPopups\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 289,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(ImagePopup, {\n            card: this.state.selectedCard,\n            onClose: this.closeAllPopups\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(InfoTooltip, {\n            isOpen: this.state.isInfoTooltipOpen,\n            message: this.state.infoTooltipMessage,\n            buttonName: this.state.infoTooltipButtonName,\n            onConfirm: this.handleConfirmRegister,\n            onClose: this.closeAllPopups\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 300,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default _c = withRouter(App);\n\nvar _c;\n\n$RefreshReg$(_c, \"%default%\");","map":{"version":3,"sources":["/home/maksim/dev/mesto-react-auth/src/components/App.js"],"names":["Component","Route","Switch","Redirect","withRouter","CurrentUserContext","api","Header","Main","Footer","EditProfilePopup","EditAvatarPopup","AddPlacePopup","ImagePopup","ConfirmDeletePopup","ProtectedRoute","Register","Login","InfoTooltip","Auth","App","constructor","props","handleLogin","setState","loggedIn","tokenCheck","localStorage","getItem","jwt","getContent","then","res","userData","email","history","push","handleEditProfileClick","isEditProfilePopupOpen","handleAddPlaceClick","isAddPlacePopupOpen","handleEditAvatarClick","isEditAvatarPopupOpen","handleConfirmDeleteCardClick","isConfirmPopupOpen","handleEscClick","event","key","closeAllPopups","handleOutsideClick","target","classList","contains","handleUpdateUser","userName","userDescription","setUserInfo","currentUser","catch","err","console","log","handleUpdateAvatar","userAvatar","setAvatar","handleCardLike","card","isLiked","likes","some","like","_id","state","changeLikeCardStatus","getCard","cards","map","oldCard","handleCardDelete","deleteCard","filter","currentCard","handleCardClick","selectedCard","handleAddPlace","placeName","placeImage","setCard","newCard","isInfoTooltipOpen","openConfirmDeletePopup","openTooltipSuccess","isSuccess","infoTooltipButtonName","infoTooltipMessage","openTooltipFail","handleConfirmRegister","bind","componentDidMount","getUserInfo","getCards","getCardsArray","document","addEventListener","componentWillUnmount","removeEventListener","render"],"mappings":"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","sourcesContent":["import { Component } from 'react';\nimport { Route, Switch, Redirect, withRouter } from 'react-router-dom';\nimport { CurrentUserContext } from '../contexts/CurrentUserContext';\nimport api from '../utils/Api';\nimport Header from './Header';\nimport Main from './Main';\nimport Footer from './Footer';\nimport EditProfilePopup from './EditProfilePopup';\nimport EditAvatarPopup from './EditAvatarPopup';\nimport AddPlacePopup from './AddPlacePopup';\nimport ImagePopup from './ImagePopup';\nimport ConfirmDeletePopup from './ConfirmDeletePopup';\nimport ProtectedRoute from './ProtectedRoute';\nimport Register from './Register';\nimport Login from './Login';\nimport InfoTooltip from './InfoTooltip';\nimport * as Auth from './Auth';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      isEditProfilePopupOpen: false,\n      isAddPlacePopupOpen: false,\n      isEditAvatarPopupOpen: false,\n      isConfirmPopupOpen: false,\n      isInfoTooltipOpen: false,\n      infoTooltipButtonName: '',\n      infoTooltipMessage: '',\n      isSuccess: false,\n      selectedCard: {},\n      deleteCard: {},\n      cards: [],\n      currentUser: {},\n      loggedIn: false\n    };\n\n    this.handleLogin = this.handleLogin.bind(this);\n    this.tokenCheck = this.tokenCheck.bind(this);\n  }\n\n  handleLogin = () => {\n    this.setState({ loggedIn: true })\n  }\n\n  tokenCheck = () => {\n    if (localStorage.getItem('jwt')) {\n      const jwt = localStorage.getItem('jwt');\n    }\n    if (jwt) {\n      Auth.getContent(jwt).then((res) => {\n        if (res) {\n          const userData = {\n            email: res.email\n          }\n          this.setState({\n            loggedIn: true\n          }, () => {\n            this.props.history.push(\"/main\");\n          });\n        }\n      });\n    }\n  }\n\n  handleEditProfileClick = () => {\n    this.setState({ isEditProfilePopupOpen: true });\n  }\n\n  handleAddPlaceClick = () => {\n    this.setState({ isAddPlacePopupOpen: true });\n  }\n\n  handleEditAvatarClick = () => {\n    this.setState({ isEditAvatarPopupOpen: true });\n  }\n\n  handleConfirmDeleteCardClick = () => {\n    this.setState({ isConfirmPopupOpen: true });\n  }\n\n  handleEscClick = (event) => {\n    if (event.key === 'Escape') {\n      this.closeAllPopups();\n    }\n  }\n\n  handleOutsideClick = (event) => {\n    if (event.target.classList.contains('popup')) {\n      this.closeAllPopups();\n    }\n  }\n\n  handleUpdateUser = (userName, userDescription) => {\n    api.setUserInfo(userName, userDescription)\n      .then(userData => {\n        this.setState({ currentUser: userData });\n        this.closeAllPopups();\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  }\n\n  handleUpdateAvatar = (userAvatar) => {\n    api.setAvatar(userAvatar)\n      .then(userData => {\n        this.setState({ currentUser: userData });\n        this.closeAllPopups();\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  }\n\n  handleCardLike = (card) => {\n\n    const isLiked = card.likes.some(like => like._id === this.state.currentUser._id);\n\n    api.changeLikeCardStatus(card._id, isLiked)\n      .then(getCard => {\n        this.setState({ cards: this.state.cards.map(oldCard => oldCard._id === getCard._id ? getCard : oldCard) });\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  }\n\n  handleCardDelete = () => {\n    api.deleteCard(this.state.deleteCard._id)\n      .then(() => {\n        this.setState(\n          {\n            cards: this.state.cards.filter(currentCard => currentCard._id !== this.state.deleteCard._id),\n            isConfirmPopupOpen: false\n          }\n        ); \n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  }\n\n  handleCardClick = (card) => {\n    this.setState({ selectedCard: card });\n  }\n\n  handleAddPlace = (placeName, placeImage) => {\n    api.setCard(placeName, placeImage)\n    .then(newCard => {\n      this.setState({ cards: [newCard, ...this.state.cards] });\n      this.closeAllPopups();\n    })\n    .catch((err) => {\n      console.log(err);\n    });\n  }\n\n  componentDidMount() {\n    api.getUserInfo()\n      .then(userData => {\n        this.setState({ currentUser: userData });\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n\n      api.getCards()\n      .then(getCardsArray => {\n        this.setState({ cards: getCardsArray });\n      })\n      .catch(err => {\n        console.log(err);\n      });\n\n    this.tokenCheck();\n\n    document.addEventListener(\"keydown\", this.handleEscClick);\n    document.addEventListener(\"click\", this.handleOutsideClick);\n  }\n\n  componentWillUnmount() {\n    document.removeEventListener(\"keydown\", this.handleEscClick);\n    document.addEventListener(\"click\", this.handleOutsideClick);\n  }\n\n  closeAllPopups = () => {\n    this.setState(\n      {\n        isEditProfilePopupOpen: false,\n        isAddPlacePopupOpen: false,\n        isEditAvatarPopupOpen: false,\n        isConfirmPopupOpen: false,\n        isInfoTooltipOpen: false,\n        selectedCard: {}\n      }\n    );\n  }\n\n  openConfirmDeletePopup = (card) => {\n    this.setState({ deleteCard: card, isConfirmPopupOpen: true });\n  }\n\n  openTooltipSuccess = () => {\n    this.setState({\n      isSuccess: true,\n      isInfoTooltipOpen: true,\n      infoTooltipButtonName: 'success',\n      infoTooltipMessage: 'Вы успешно зарегистрировались!'\n    });\n  }\n\n  openTooltipFail = () => {\n    this.setState({\n      isSuccess: false,\n      isInfoTooltipOpen: true,\n      infoTooltipButtonName: 'fail',\n      infoTooltipMessage: 'Что-то пошло не так! Попробуйте ещё раз.'\n    });\n  }\n\n  handleConfirmRegister = () => {\n    this.closeAllPopups();\n    if(this.state.isSuccess) {\n      this.props.history.push('/signin');\n    } \n  }\n\n  render() {\n    return (\n      <div className=\"page\">\n        <div className=\"container\">\n\n          <CurrentUserContext.Provider value={this.state.currentUser}>\n\n            <Header loggedIn={this.state.loggedIn} email={this.userData.email} buttonText='Выйти' />\n\n            <Switch>\n\n              <ProtectedRoute\n                path=\"/main\"\n                loggedIn={this.state.loggedIn}\n                cards={this.state.cards}\n                onEditProfile={this.handleEditProfileClick}\n                onAddPlace={this.handleAddPlaceClick}\n                onEditAvatar={this.handleEditAvatarClick}\n                onCardLike={this.handleCardLike}\n                onCardDelete={this.openConfirmDeletePopup}\n                onCardClick={this.handleCardClick}\n                component={Main}>\n              </ProtectedRoute>\n\n              <Route path=\"/signin\">\n                <Login handleLogin={this.handleLogin} />\n              </Route>\n\n              <Route path=\"/signup\">\n                <Register tooltipSuccess={this.openTooltipSuccess} tooltipFail={this.openTooltipFail} />\n              </Route>\n\n              <Route>\n                {this.state.loggedIn ? <Redirect to=\"/signin\" /> : <Redirect to=\"/signup\" />}\n              </Route>\n\n            </Switch>\n\n            {this.state.loggedIn && <Footer />}\n            \n\n            <EditProfilePopup\n              isOpen={this.state.isEditProfilePopupOpen}\n              onUpdateUser={this.handleUpdateUser}\n              onClose={this.closeAllPopups}\n            />\n\n            <EditAvatarPopup\n              isOpen={this.state.isEditAvatarPopupOpen}\n              onUpdateAvatar={this.handleUpdateAvatar}\n              onClose={this.closeAllPopups}\n            />\n\n            <AddPlacePopup\n              isOpen={this.state.isAddPlacePopupOpen}\n              onAddPlace={this.handleAddPlace}\n              onClose={this.closeAllPopups}\n            />\n\n            <ConfirmDeletePopup\n              isOpen={this.state.isConfirmPopupOpen}\n              onConfirmDeleteCard={this.handleCardDelete}\n              onClose={this.closeAllPopups}\n            />\n\n            <ImagePopup\n              card={this.state.selectedCard}\n              onClose={this.closeAllPopups}\n            />\n\n            <InfoTooltip\n              isOpen={this.state.isInfoTooltipOpen}\n              message={this.state.infoTooltipMessage}\n              buttonName={this.state.infoTooltipButtonName}\n              onConfirm={this.handleConfirmRegister}\n              onClose={this.closeAllPopups}\n            />\n\n          </CurrentUserContext.Provider>\n          \n        </div>\n      </div>\n    );\n  } \n}\n\nexport default withRouter(App);\n\n"]},"metadata":{},"sourceType":"module"}