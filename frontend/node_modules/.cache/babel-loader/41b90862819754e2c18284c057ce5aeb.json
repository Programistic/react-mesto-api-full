{"ast":null,"code":"const cohortID = 'cohort-39';\nconst token = 'fed91f6d-1f71-4682-bc63-ccd602fc60c4';\nconst baseURL = 'https://mesto.nomoreparties.co/v1/';\nconst cardURL = `${baseURL}${cohortID}/cards`;\nconst userURL = `${baseURL}${cohortID}/users/me`;\nconst avatarURL = `${baseURL}${cohortID}/users/me/avatar`;\n\nclass Api {\n  constructor(userURL, cardURL, avatarURL, token) {\n    this._userURL = userURL;\n    this._cardURL = cardURL;\n    this._avatarURL = avatarURL;\n    this._token = token;\n    this._headers = {\n      authorization: this._token,\n      'Content-Type': 'application/json'\n    };\n  }\n\n  getProfile() {\n    return fetch(this._userURL, {\n      headers: this._headers\n    }).then(res => this._getResponseData(res));\n  }\n\n  getCards() {\n    return fetch(this._cardURL, {\n      headers: this._headers\n    }).then(res => this._getResponseData(res));\n  }\n\n  setUserInfo(userData) {\n    return fetch(this._userURL, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: userData['user-name'],\n        about: userData['user-info']\n      })\n    }).then(res => this._getResponseData(res));\n  }\n\n  setAvatar(avatarData) {\n    return fetch(this._avatarURL, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: avatarData['avatar-image']\n      })\n    }).then(res => this._getResponseData(res));\n  }\n\n  setCard(cardData) {\n    return fetch(this._cardURL, {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: cardData['place-name'],\n        link: cardData['place-image']\n      })\n    }).then(res => this._getResponseData(res));\n  }\n\n  deleteCard(cardID) {\n    return fetch(this._cardURL + `/${cardID}`, {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(res => this._getResponseData(res));\n  }\n\n  _addLike(cardID) {\n    return fetch(this._cardURL + `/${cardID}/likes`, {\n      method: 'PUT',\n      headers: this._headers\n    }).then(res => this._getResponseData(res));\n  }\n\n  _deleteLike(cardID) {\n    return fetch(this._cardURL + `/${cardID}/likes`, {\n      method: 'DELETE',\n      headers: this._headers\n    }).then(res => this._getResponseData(res));\n  }\n\n  changeLikeCardStatus(cardID, isLiked) {\n    if (!isLiked) {\n      return fetch(this._cardURL + `/${cardID}/likes`, {\n        method: 'PUT',\n        headers: this._headers\n      }).then(res => this._getResponseData(res));\n    } else {\n      return fetch(this._cardURL + `/${cardID}/likes`, {\n        method: 'DELETE',\n        headers: this._headers\n      }).then(res => this._getResponseData(res));\n    }\n  }\n\n  _getResponseData(res) {\n    return res.ok ? res.json() : Promise.reject(`Error ${res.status}`);\n  }\n\n}\n\nconst api = new Api(userURL, cardURL, avatarURL, token);\nexport default api;","map":{"version":3,"sources":["/home/maksim/dev/mesto-react/src/utils/Api.js"],"names":["cohortID","token","baseURL","cardURL","userURL","avatarURL","Api","constructor","_userURL","_cardURL","_avatarURL","_token","_headers","authorization","getProfile","fetch","headers","then","res","_getResponseData","getCards","setUserInfo","userData","method","body","JSON","stringify","name","about","setAvatar","avatarData","avatar","setCard","cardData","link","deleteCard","cardID","_addLike","_deleteLike","changeLikeCardStatus","isLiked","ok","json","Promise","reject","status","api"],"mappings":"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","sourcesContent":["const cohortID = 'cohort-39';\nconst token = 'fed91f6d-1f71-4682-bc63-ccd602fc60c4';\nconst baseURL = 'https://mesto.nomoreparties.co/v1/';\nconst cardURL = `${baseURL}${cohortID}/cards`;\nconst userURL = `${baseURL}${cohortID}/users/me`;\nconst avatarURL =`${baseURL}${cohortID}/users/me/avatar`;\n\nclass Api {\n  constructor(userURL, cardURL, avatarURL, token) {\n    this._userURL = userURL;\n    this._cardURL = cardURL;\n    this._avatarURL = avatarURL;\n    this._token = token;\n    this._headers = { authorization: this._token, 'Content-Type': 'application/json' }\n  }\n\n  getProfile() {\n    return fetch(this._userURL, {\n      headers: this._headers\n    })\n      .then(res => this._getResponseData(res));\n  }\n\n  getCards() {\n    return fetch(this._cardURL, {\n      headers: this._headers\n    })\n      .then(res => this._getResponseData(res))\n  }\n\n  setUserInfo(userData) {\n    return fetch(this._userURL, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: userData['user-name'],\n        about: userData['user-info']\n      })\n    })\n      .then(res => this._getResponseData(res))\n  }\n\n  setAvatar(avatarData) {\n    return fetch(this._avatarURL, {\n      method: 'PATCH',\n      headers: this._headers,\n      body: JSON.stringify({\n        avatar: avatarData['avatar-image']\n      })\n    })\n      .then(res => this._getResponseData(res))\n  }\n\n  setCard(cardData) {\n    return fetch(this._cardURL, {\n      method: 'POST',\n      headers: this._headers,\n      body: JSON.stringify({\n        name: cardData['place-name'],\n        link: cardData['place-image']\n      })\n    })\n      .then(res => this._getResponseData(res))\n  }\n\n  deleteCard(cardID) {\n    return fetch(this._cardURL + `/${cardID}`, {\n      method: 'DELETE',\n      headers: this._headers\n    })\n      .then(res => this._getResponseData(res));\n  }\n\n  _addLike(cardID) {\n    return fetch(this._cardURL + `/${cardID}/likes`, {\n      method: 'PUT',\n      headers: this._headers\n    })\n      .then(res => this._getResponseData(res));\n  }\n\n  _deleteLike(cardID) {\n    return fetch(this._cardURL + `/${cardID}/likes`, {\n      method: 'DELETE',\n      headers: this._headers\n    })\n      .then(res => this._getResponseData(res));\n  }\n\n  changeLikeCardStatus(cardID, isLiked) {\n    if (!isLiked) {\n      return fetch(this._cardURL + `/${cardID}/likes`, {\n        method: 'PUT',\n        headers: this._headers\n      })\n        .then(res => this._getResponseData(res));\n    } else {\n      return fetch(this._cardURL + `/${cardID}/likes`, {\n        method: 'DELETE',\n        headers: this._headers\n      })\n        .then(res => this._getResponseData(res));\n      }\n  }\n\n  _getResponseData(res) {\n    return res.ok ? res.json() : Promise.reject(`Error ${res.status}`)\n  }\n}\n\nconst api = new Api(userURL, cardURL, avatarURL, token);\n\nexport default api;\n"]},"metadata":{},"sourceType":"module"}