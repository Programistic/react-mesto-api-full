{"ast":null,"code":"const cohortID = 'cohort-39';\nconst token = 'fed91f6d-1f71-4682-bc63-ccd602fc60c4';\nconst cardURL = `https://mesto.nomoreparties.co/v1/${cohortID}/cards`;\nconst userURL = `https://mesto.nomoreparties.co/v1/${cohortID}/users/me`;\nconst avatarURL = `https://mesto.nomoreparties.co/v1/${cohortID}/users/me/avatar`;\n\nclass Api {\n  constructor(userURL, cardURL, avatarURL, token) {\n    this._userURL = userURL;\n    this._cardURL = cardURL;\n    this._avatarURL = avatarURL;\n    this._token = token;\n  }\n\n  getProfile() {\n    return fetch(this._userURL, {\n      headers: {\n        authorization: this._token\n      }\n    }).then(res => this._getResponseData(res));\n  }\n\n  getCards() {\n    return fetch(this._cardURL, {\n      headers: {\n        authorization: this._token\n      }\n    }).then(res => this._getResponseData(res));\n  }\n\n  setUserInfo(userData) {\n    return fetch(this._userURL, {\n      method: 'PATCH',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: userData['user-name'],\n        about: userData['user-info']\n      })\n    }).then(res => this._getResponseData(res));\n  }\n\n  setAvatar(avatarData) {\n    return fetch(this._avatarURL, {\n      method: 'PATCH',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        avatar: avatarData['avatar-image']\n      })\n    }).then(res => this._getResponseData(res));\n  }\n\n  setCard(cardData) {\n    return fetch(this._cardURL, {\n      method: 'POST',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: cardData['place-name'],\n        link: cardData['place-image']\n      })\n    }).then(res => this._getResponseData(res));\n  }\n\n  deleteCard(cardID) {\n    return fetch(this._cardURL + `/${cardID}`, {\n      method: 'DELETE',\n      headers: {\n        authorization: this._token\n      }\n    }).then(res => this._getResponseData(res));\n  }\n\n  addLike(cardID) {\n    return fetch(this._cardURL + `/${cardID}/likes`, {\n      method: 'PUT',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      }\n    }).then(res => this._getResponseData(res));\n  }\n\n  deleteLike(cardID) {\n    return fetch(this._cardURL + `/${cardID}/likes`, {\n      method: 'DELETE',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      }\n    }).then(res => this._getResponseData(res));\n  }\n\n  _getResponseData(res) {\n    return res.ok ? res.json() : Promise.reject(`Error ${res.status}`);\n  }\n\n}\n\nconst api = new Api(userURL, cardURL, avatarURL, token);\nexport default api;","map":{"version":3,"sources":["/home/maksim/dev/mesto-react/src/utils/Api.js"],"names":["cohortID","token","cardURL","userURL","avatarURL","Api","constructor","_userURL","_cardURL","_avatarURL","_token","getProfile","fetch","headers","authorization","then","res","_getResponseData","getCards","setUserInfo","userData","method","body","JSON","stringify","name","about","setAvatar","avatarData","avatar","setCard","cardData","link","deleteCard","cardID","addLike","deleteLike","ok","json","Promise","reject","status","api"],"mappings":"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","sourcesContent":["const cohortID = 'cohort-39';\nconst token = 'fed91f6d-1f71-4682-bc63-ccd602fc60c4';\nconst cardURL = `https://mesto.nomoreparties.co/v1/${cohortID}/cards`;\nconst userURL = `https://mesto.nomoreparties.co/v1/${cohortID}/users/me`;\nconst avatarURL =`https://mesto.nomoreparties.co/v1/${cohortID}/users/me/avatar`;\n\nclass Api {\n  constructor(userURL, cardURL, avatarURL, token) {\n    this._userURL = userURL;\n    this._cardURL = cardURL;\n    this._avatarURL = avatarURL;\n    this._token = token;\n  }\n\n  getProfile() {\n    return fetch(this._userURL, {\n      headers: {\n        authorization: this._token\n      }\n    })\n      .then(res => this._getResponseData(res));\n  }\n\n  getCards() {\n    return fetch(this._cardURL, {\n      headers: {\n        authorization: this._token\n      }\n    })\n      .then(res => this._getResponseData(res))\n  }\n\n  setUserInfo(userData) {\n    return fetch(this._userURL, {\n      method: 'PATCH',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: userData['user-name'],\n        about: userData['user-info']\n      })\n    })\n      .then(res => this._getResponseData(res))\n  }\n\n  setAvatar(avatarData) {\n    return fetch(this._avatarURL, {\n      method: 'PATCH',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        avatar: avatarData['avatar-image']\n      })\n    })\n      .then(res => this._getResponseData(res))\n  }\n\n  setCard(cardData) {\n    return fetch(this._cardURL, {\n      method: 'POST',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: cardData['place-name'],\n        link: cardData['place-image']\n      })\n    })\n      .then(res => this._getResponseData(res))\n  }\n\n  deleteCard(cardID) {\n    return fetch(this._cardURL + `/${cardID}`, {\n      method: 'DELETE',\n      headers: {\n        authorization: this._token\n      }\n    })\n      .then(res => this._getResponseData(res));\n  }\n\n  addLike(cardID) {\n    return fetch(this._cardURL + `/${cardID}/likes`, {\n      method: 'PUT',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      }\n    })\n      .then(res => this._getResponseData(res));\n  }\n\n  deleteLike(cardID) {\n    return fetch(this._cardURL + `/${cardID}/likes`, {\n      method: 'DELETE',\n      headers: {\n        authorization: this._token,\n        'Content-Type': 'application/json'\n      }\n    })\n      .then(res => this._getResponseData(res));\n  }\n\n  _getResponseData(res) {\n    return res.ok ? res.json() : Promise.reject(`Error ${res.status}`)\n  }\n}\n\nconst api = new Api(userURL, cardURL, avatarURL, token);\n\nexport default api;\n"]},"metadata":{},"sourceType":"module"}